generator client {
  provider = "prisma-client-js"
}

// Community forum models
model Post {
  id        String   @id @default(cuid())
  userId    String
  courseId  String? // optional: link post to a course
  title     String
  body      String
  tagsJson  String   @default("[]")
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers  Answer[]
  upvoters PostUpvote[]

  @@index([courseId, createdAt])
}

model Answer {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  body      String
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
}

model PostUpvote {
  id     String @id @default(cuid())
  postId String
  userId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model BadgeAward {
  id        String   @id @default(cuid())
  userId    String
  badge     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, badge])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // Secure auth fields
  passwordHash  String?   @map("password_hash")
  role          String    @default("user")

  accounts       Account[]
  sessions       Session[]
  enrollments    Enrollment[]
  userActivity   UserActivity?
  activityEvents ActivityEvent[]
  videoProgress  VideoProgress[]
  posts          Post[]
  answers        Answer[]
  postUpvotes    PostUpvote[]
  badgeAwards    BadgeAward[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Enrollment {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  progressPercent Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model UserActivity {
  id         String   @id @default(cuid())
  userId     String   @unique
  daysJson   String   @default("[]")
  badgesJson String   @default("[]")
  streak     Int      @default(0)
  statsJson  String   @default("{}")
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Granular activity events (study sessions, quiz attempts, generic actions)
model ActivityEvent {
  id        String   @id @default(cuid())
  userId    String
  type      String // e.g., "study_session", "quiz_submit", "video_watch", "page_view"
  durationS Int      @default(0) // seconds, if applicable
  metaJson  String   @default("{}") // arbitrary JSON payload
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
}

/// Per-video progress for the user
model VideoProgress {
  id             String   @id @default(cuid())
  userId         String
  videoId        String
  courseId       String?
  secondsWatched Int      @default(0)
  lastPositionS  Int      @default(0)
  completed      Boolean  @default(false)
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId, courseId])
}
